IncomingMessage {
    _readableState:
     ReadableState {
       objectMode: false,
       highWaterMark: 16384,
       buffer: BufferList { length: 0
        },
       length: 0,
       pipes: null,
       pipesCount: 0,
       flowing: null,
       ended: true,
       endEmitted: false,
       reading: false,
       sync: true,
       needReadable: false,
       emittedReadable: true,
       readableListening: false,
       resumeScheduled: false,
       emitClose: true,
       destroyed: false,
       defaultEncoding: 'utf8',
       awaitDrain: 0,
       readingMore: true,
       decoder: null,
       encoding: null
    },
    readable: true,
    _events: {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket:
     Socket {
       connecting: false,
       _hadError: false,
       _handle:
        TCP {
          reading: true,
          owner: [Circular
            ],
          onread: [Function: onread
            ],
          onconnection: null,
          _consumed: true
        },
       _parent: null,
       _host: null,
       _readableState:
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { length: 0
            },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrain: 0,
          readingMore: false,
          decoder: null,
          encoding: null
        },
       readable: true,
       _events: { end: [Array
            ],
          drain: [Array
            ],
          timeout: [Function: socketOnTimeout
            ],        data: [Function: bound socketOnData
            ],        error: [Function: socketOnError
            ],
          close: [Array
            ],
          resume: [Function: onSocketResume
            ],
          pause: [Function: onSocketPause
            ]
        },
       _eventsCount: 8,
       _maxListeners: undefined,
       _writableState:
        WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite
            ],
          writecb: null,
          writelen: 0,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: [Object
            ]
        },
       writable: true,
       allowHalfOpen: true,
       _sockname: null,
       _pendingData: null,
       _pendingEncoding: '',
       server:
        Server {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 6,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 57497
        },
       _server:
        Server {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 6,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 57497
        },
       timeout: 120000,
       parser:
        HTTPParser {
          '0': [Function: parserOnHeaders
            ],
          '1': [Function: parserOnHeadersComplete
            ],
          '2': [Function: parserOnBody
            ],
          '3': [Function: parserOnMessageComplete
            ],
          '4': [Function: bound onParserExecute
            ],
          _headers: [],
          _url: '',
          _consumed: true,
          socket: [Circular
            ],
          incoming: [Circular
            ],
          outgoing: null,
          maxHeaderPairs: 2000,
          onIncoming: [Function: bound parserOnIncoming
            ]
        },
       on: [Function: socketOnWrap
        ],
       _paused: false,
       _httpMessage:
        ServerResponse {
          _events: [Object
            ],
          _eventsCount: 1,
          _maxListeners: undefined,
          output: [],
          outputEncodings: [],
          outputCallbacks: [],
          outputSize: 0,
          writable: true,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          socket: [Circular
            ],
          connection: [Circular
            ],
          _header: null,
          _onPendingData: [Function: bound updateOutgoingData
            ],
          _sent100: false,
          _expect_continue: false,
          req: [Circular
            ],
          locals: {},
            [Symbol(isCorked)
            ]: false,
            [Symbol(outHeadersKey)
            ]: [Object
            ]
        },
        [Symbol(asyncId)
        ]: 98002,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]:
        Timeout {
          _called: false,
          _idleTimeout: 120000,
          _idlePrev: [TimersList
            ],
          _idleNext: [Timeout
            ],
          _idleStart: 292616,
          _onTimeout: [Function: bound
            ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
            [Symbol(unrefed)
            ]: true,
            [Symbol(asyncId)
            ]: 98254,
            [Symbol(triggerId)
            ]: 98004
        },
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    connection:
     Socket {
       connecting: false,
       _hadError: false,
       _handle:
        TCP {
          reading: true,
          owner: [Circular
            ],
          onread: [Function: onread
            ],
          onconnection: null,
          _consumed: true
        },
       _parent: null,
       _host: null,
       _readableState:
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { length: 0
            },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrain: 0,
          readingMore: false,
          decoder: null,
          encoding: null
        },
       readable: true,
       _events: { end: [Array
            ],
          drain: [Array
            ],
          timeout: [Function: socketOnTimeout
            ],        data: [Function: bound socketOnData
            ],        error: [Function: socketOnError
            ],
          close: [Array
            ],
          resume: [Function: onSocketResume
            ],
          pause: [Function: onSocketPause
            ]
        },
       _eventsCount: 8,
       _maxListeners: undefined,
       _writableState:
        WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite
            ],
          writecb: null,
          writelen: 0,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: [Object
            ]
        },
       writable: true,
       allowHalfOpen: true,
       _sockname: null,
       _pendingData: null,
       _pendingEncoding: '',
       server:
        Server {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 6,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 57497
        },
       _server:
        Server {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 6,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 57497
        },
       timeout: 120000,
       parser:
        HTTPParser {
          '0': [Function: parserOnHeaders
            ],
          '1': [Function: parserOnHeadersComplete
            ],
          '2': [Function: parserOnBody
            ],
          '3': [Function: parserOnMessageComplete
            ],
          '4': [Function: bound onParserExecute
            ],
          _headers: [],
          _url: '',
          _consumed: true,
          socket: [Circular
            ],
          incoming: [Circular
            ],
          outgoing: null,
          maxHeaderPairs: 2000,
          onIncoming: [Function: bound parserOnIncoming
            ]
        },
       on: [Function: socketOnWrap
        ],
       _paused: false,
       _httpMessage:
        ServerResponse {
          _events: [Object
            ],
          _eventsCount: 1,
          _maxListeners: undefined,
          output: [],
          outputEncodings: [],
          outputCallbacks: [],
          outputSize: 0,
          writable: true,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          socket: [Circular
            ],
          connection: [Circular
            ],
          _header: null,
          _onPendingData: [Function: bound updateOutgoingData
            ],
          _sent100: false,
          _expect_continue: false,
          req: [Circular
            ],
          locals: {},
            [Symbol(isCorked)
            ]: false,
            [Symbol(outHeadersKey)
            ]: [Object
            ]
        },
        [Symbol(asyncId)
        ]: 98002,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]:
        Timeout {
          _called: false,
          _idleTimeout: 120000,
          _idlePrev: [TimersList
            ],
          _idleNext: [Timeout
            ],
          _idleStart: 292616,
          _onTimeout: [Function: bound
            ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
            [Symbol(unrefed)
            ]: true,
            [Symbol(asyncId)
            ]: 98254,
            [Symbol(triggerId)
            ]: 98004
        },
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: { host: 'localhost: 3000',
       connection: 'keep-alive',
       'cache-control': 'max-age=0',
       'upgrade-insecure-requests': '1',
       'user-agent':
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36',
       accept:
        'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,* /*;q=0.8',
       'accept-encoding': 'gzip, deflate, br',
       'accept-language': 'tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7',
       cookie:
        '_ga=GA1.1.1787995647.1532011416; __utma=111872281.1787995647.1532011416.1541894123.1541894123.1; __utmz=111872281.1541894123.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); ssupp.vid=DEEgmp8ZjJzZixYJks7hQekkNgLlnzDp6024550211112018' },
    rawHeaders:
     [ 'Host',
       'localhost:3000',
       'Connection',
       'keep-alive',
       'Cache-Control',
       'max-age=0',
       'Upgrade-Insecure-Requests',
       '1',
       'User-Agent',
       'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36',
       'Accept',
       'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
       'Accept-Encoding',
       'gzip, deflate, br',
       'Accept-Language',
       'tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7',
       'Cookie',
       '_ga=GA1.1.1787995647.1532011416; __utma=111872281.1787995647.1532011416.1541894123.1541894123.1; __utmz=111872281.1541894123.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); ssupp.vid=DEEgmp8ZjJzZixYJks7hQekkNgLlnzDp6024550211112018'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/Andru%20Modular%20Kitchen',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client:
     Socket {
       connecting: false,
       _hadError: false,
       _handle:
        TCP {
          reading: true,
          owner: [Circular
            ],
          onread: [Function: onread
            ],
          onconnection: null,
          _consumed: true
        },
       _parent: null,
       _host: null,
       _readableState:
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { length: 0
            },
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          emitClose: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrain: 0,
          readingMore: false,
          decoder: null,
          encoding: null
        },
       readable: true,
       _events: { end: [Array
            ],
          drain: [Array
            ],
          timeout: [Function: socketOnTimeout
            ],        data: [Function: bound socketOnData
            ],        error: [Function: socketOnError
            ],
          close: [Array
            ],
          resume: [Function: onSocketResume
            ],
          pause: [Function: onSocketPause
            ]
        },
       _eventsCount: 8,
       _maxListeners: undefined,
       _writableState:
        WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite
            ],
          writecb: null,
          writelen: 0,
          bufferedRequest: null,
          lastBufferedRequest: null,
          pendingcb: 0,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          bufferedRequestCount: 0,
          corkedRequestsFree: [Object
            ]
        },
       writable: true,
       allowHalfOpen: true,
       _sockname: null,
       _pendingData: null,
       _pendingEncoding: '',
       server:
        Server {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 6,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 57497
        },
       _server:
        Server {
          _events: [Object
            ],
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 6,
          _handle: [TCP
            ],
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function
            ],
            [Symbol(ServerResponse)
            ]: [Function
            ],
            [Symbol(asyncId)
            ]: 57497
        },
       timeout: 120000,
       parser:
        HTTPParser {
          '0': [Function: parserOnHeaders
            ],
          '1': [Function: parserOnHeadersComplete
            ],
          '2': [Function: parserOnBody
            ],
          '3': [Function: parserOnMessageComplete
            ],
          '4': [Function: bound onParserExecute
            ],
          _headers: [],
          _url: '',
          _consumed: true,
          socket: [Circular
            ],
          incoming: [Circular
            ],
          outgoing: null,
          maxHeaderPairs: 2000,
          onIncoming: [Function: bound parserOnIncoming
            ]
        },
       on: [Function: socketOnWrap
        ],
       _paused: false,
       _httpMessage:
        ServerResponse {
          _events: [Object
            ],
          _eventsCount: 1,
          _maxListeners: undefined,
          output: [],
          outputEncodings: [],
          outputCallbacks: [],
          outputSize: 0,
          writable: true,
          _last: false,
          chunkedEncoding: false,
          shouldKeepAlive: true,
          useChunkedEncodingByDefault: true,
          sendDate: true,
          _removedConnection: false,
          _removedContLen: false,
          _removedTE: false,
          _contentLength: null,
          _hasBody: true,
          _trailer: '',
          finished: false,
          _headerSent: false,
          socket: [Circular
            ],
          connection: [Circular
            ],
          _header: null,
          _onPendingData: [Function: bound updateOutgoingData
            ],
          _sent100: false,
          _expect_continue: false,
          req: [Circular
            ],
          locals: {},
            [Symbol(isCorked)
            ]: false,
            [Symbol(outHeadersKey)
            ]: [Object
            ]
        },
        [Symbol(asyncId)
        ]: 98002,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]:
        Timeout {
          _called: false,
          _idleTimeout: 120000,
          _idlePrev: [TimersList
            ],
          _idleNext: [Timeout
            ],
          _idleStart: 292616,
          _onTimeout: [Function: bound
            ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
            [Symbol(unrefed)
            ]: true,
            [Symbol(asyncId)
            ]: 98254,
            [Symbol(triggerId)
            ]: 98004
        },
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next
    ],
    baseUrl: '',
    originalUrl: '/Andru%20Modular%20Kitchen',
    _parsedUrl:
     Url {
       protocol: null,
       slashes: null,
       auth: null,
       host: null,
       port: null,
       hostname: null,
       hash: null,
       search: null,
       query: null,
       pathname: '/Andru%20Modular%20Kitchen',
       path: '/Andru%20Modular%20Kitchen',
       href: '/Andru%20Modular%20Kitchen',
       _raw: '/Andru%20Modular%20Kitchen'
    },
    params: { title: 'Andru Modular Kitchen'
    },  query: {},
    res:
     ServerResponse {
       _events: { finish: [Function: bound resOnFinish
            ]
        },
       _eventsCount: 1,
       _maxListeners: undefined,
       output: [],
       outputEncodings: [],
       outputCallbacks: [],
       outputSize: 0,
       writable: true,
       _last: false,
       chunkedEncoding: false,
       shouldKeepAlive: true,
       useChunkedEncodingByDefault: true,
       sendDate: true,
       _removedConnection: false,
       _removedContLen: false,
       _removedTE: false,
       _contentLength: null,
       _hasBody: true,
       _trailer: '',
       finished: false,
       _headerSent: false,
       socket:
        Socket {
          connecting: false,
          _hadError: false,
          _handle: [TCP
            ],
          _parent: null,
          _host: null,
          _readableState: [ReadableState
            ],
          readable: true,
          _events: [Object
            ],
          _eventsCount: 8,
          _maxListeners: undefined,
          _writableState: [WritableState
            ],
          writable: true,
          allowHalfOpen: true,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: [Server
            ],
          _server: [Server
            ],
          timeout: 120000,
          parser: [HTTPParser
            ],
          on: [Function: socketOnWrap
            ],
          _paused: false,
          _httpMessage: [Circular
            ],
            [Symbol(asyncId)
            ]: 98002,
            [Symbol(lastWriteQueueSize)
            ]: 0,
            [Symbol(timeout)
            ]: [Timeout
            ],
            [Symbol(kBytesRead)
            ]: 0,
            [Symbol(kBytesWritten)
            ]: 0
        },
       connection:
        Socket {
          connecting: false,
          _hadError: false,
          _handle: [TCP
            ],
          _parent: null,
          _host: null,
          _readableState: [ReadableState
            ],
          readable: true,
          _events: [Object
            ],
          _eventsCount: 8,
          _maxListeners: undefined,
          _writableState: [WritableState
            ],
          writable: true,
          allowHalfOpen: true,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: [Server
            ],
          _server: [Server
            ],
          timeout: 120000,
          parser: [HTTPParser
            ],
          on: [Function: socketOnWrap
            ],
          _paused: false,
          _httpMessage: [Circular
            ],
            [Symbol(asyncId)
            ]: 98002,
            [Symbol(lastWriteQueueSize)
            ]: 0,
            [Symbol(timeout)
            ]: [Timeout
            ],
            [Symbol(kBytesRead)
            ]: 0,
            [Symbol(kBytesWritten)
            ]: 0
        },
       _header: null,
       _onPendingData: [Function: bound updateOutgoingData
        ],
       _sent100: false,
       _expect_continue: false,
       req: [Circular
        ],
       locals: {},
        [Symbol(isCorked)
        ]: false,
        [Symbol(outHeadersKey)
        ]: { 'x-powered-by': [Array
            ]
        }
    },
    route:
     Route { path: '/:title', stack: [
            [Layer
            ]
        ], methods: { get: true
        }
    }
}